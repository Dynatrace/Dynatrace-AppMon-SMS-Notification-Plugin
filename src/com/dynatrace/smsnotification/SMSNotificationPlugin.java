/**
 * This template file was generated by dynaTrace client.
 * The dynaTrace community portal can be found here: http://community.dynatrace.com/
 * For information how to publish a plugin please visit http://community.dynatrace.com/plugins/contribute/
 **/

package com.dynatrace.smsnotification;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.eclipse.core.runtime.Platform;
import org.smslib.AGateway;
import org.smslib.GatewayException;
import org.smslib.Library;
import org.smslib.OutboundMessage;
import org.smslib.OutboundMessage.MessageStatuses;
import org.smslib.SMSLibException;
import org.smslib.Service;
import org.smslib.TimeoutException;
import org.smslib.http.BulkSmsHTTPGateway;
import org.smslib.http.ClickatellHTTPGateway;
import org.smslib.modem.SerialModemGateway;

import com.dynatrace.diagnostics.pdk.Action;
import com.dynatrace.diagnostics.pdk.ActionEnvironment;
import com.dynatrace.diagnostics.pdk.Incident;
import com.dynatrace.diagnostics.pdk.Incident.Severity;
import com.dynatrace.diagnostics.pdk.Sensitivity.Type;
import com.dynatrace.diagnostics.pdk.Status;
import com.dynatrace.diagnostics.sdk.Condition30Impl;
import com.dynatrace.diagnostics.sdk.Duration30Impl;
import com.dynatrace.diagnostics.sdk.Incident30Impl;
import com.dynatrace.diagnostics.sdk.IncidentRule30Impl;
import com.dynatrace.diagnostics.sdk.Sensitivity30Impl;
import com.dynatrace.diagnostics.sdk.Timestamp30Impl;
import com.dynatrace.smsnotification.configuration.AbstractSMSNotificationPluginConfiguration;
import com.dynatrace.smsnotification.configuration.HardwareDeviceSMSConfiguration;
import com.dynatrace.smsnotification.configuration.InternetGatewaySMSConfiguration;
import com.dynatrace.smsnotification.configuration.SMSNotificationPluginConfigurationException;
import com.dynatrace.smsnotification.util.LibUtils;

public class SMSNotificationPlugin implements Action {
	// Logger
	private static final Logger logger = Logger.getLogger(SMSNotificationPlugin.class.getName());

	// SMS service
	private Service smsService;

	private void installNativeLibraryFromResources(String pLibraryName) throws IOException, URISyntaxException {
		// Get resource file location (Source)
		URL sourceFileURL = this.getClass().getResource("/res/" + pLibraryName);
		File sourceFile = null;

		if (sourceFileURL == null) {
			// Debug: For running from IDE
			File aIDEFilePath = new File(this.getClass().getResource("/").toURI());
			sourceFile = new File(aIDEFilePath.getAbsolutePath().replace("bin", "res") + "/" + pLibraryName);
			sourceFileURL = sourceFile.toURI().toURL();
		}
		if (sourceFileURL != null) {
			// Install resource into user directory
			// The reason for doing this is to have the native library installed
			// into a location which is included in the default JVM library
			// path.
			// So the JVM can load the native library without the need to
			// reconfigure the library path itself.

			// WARNING: Would prefer to use FileLocator to avoid the usage of a
			// @deprecated method, but then dynaTrace can't compile.
			try {
				sourceFileURL = Platform.resolve(sourceFileURL);
				sourceFile = new File(sourceFileURL.getPath());
			} catch (NullPointerException pException) {
			}

			File destinationFile = new File(System.getProperty("user.dir") + pLibraryName.substring(pLibraryName.lastIndexOf("/"), pLibraryName.length()));
			if (!destinationFile.exists() && sourceFile != null) {
				copyFile(sourceFile, destinationFile);
			}
		} else {
			logger.severe("Failed to install native library '" + pLibraryName + "'");
		}
	}

	private void copyFile(File pSourceFile, File pDestinationFile) throws IOException {
		// Channels
		FileChannel sourceFileChannel = null;
		FileChannel destinationFileChannel = null;
		try {
			// Open channels
			sourceFileChannel = new FileInputStream(pSourceFile).getChannel();
			destinationFileChannel = new FileOutputStream(pDestinationFile).getChannel();

			// File size (Source)
			long fileSize = sourceFileChannel.size();

			// Buffer (Source)
			MappedByteBuffer fileBuffer = sourceFileChannel.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);

			// Buffer (Source) -> Channel (Destination)
			destinationFileChannel.write(fileBuffer);

		} finally {
			// Close channels
			if (sourceFileChannel != null) {
				sourceFileChannel.close();
			}
			if (destinationFileChannel != null) {
				destinationFileChannel.close();
			}
		}
	}

	private String stackTraceToString(Throwable throwable) {
		if (throwable != null) {
			PrintWriter printWriter = null;
			try {
				// Exception -> StringWriter > toString()
				StringWriter stringWriter = new StringWriter();
				try {
					printWriter = new PrintWriter(stringWriter);
					throwable.printStackTrace(printWriter);
					printWriter.flush();
				} finally {
					stringWriter.close();
				}
				return stringWriter.toString();
			} catch (Exception pException) {
			}
		}

		return "";
	}

	@Override
	public Status setup(ActionEnvironment pEnvironment) throws Exception {
		Status status = new Status(Status.StatusCode.Success);

		// Install native libraries (Used to communicate with hardware devices)
		try {
			switch (LibUtils.calculateOS()) {
			// Mac OS
			case APPLE:
				installNativeLibraryFromResources("macos/librxtxSerial.jnilib");
				break;

			// Linux
			case LINUX:
				switch (LibUtils.calculateArch()) {
				case X86:
					installNativeLibraryFromResources("linux/x86/librxtxSerial.so");
					installNativeLibraryFromResources("linux/x86/librxtxParallel.so");
					break;
				case X86_64:
					installNativeLibraryFromResources("linux/x64/librxtxSerial.so");
					break;
				}
				break;

			// Solaris
			case SUN:
				switch (LibUtils.calculateArch()) {
				case SPARC_32:
					installNativeLibraryFromResources("solaris/sparc32/librxtxSerial-2.1-7.so");
					installNativeLibraryFromResources("solaris/sparc32/librxtxSerial.so");
					break;
				case SPARC_64:
					installNativeLibraryFromResources("solaris/sparc64/librxtxSerial-2.1-7.so");
					installNativeLibraryFromResources("solaris/sparc64/librxtxSerial.so");
					break;
				}
				break;

			// Windows
			case WINDOWS:
				switch (LibUtils.calculateArch()) {
				case X86:
					installNativeLibraryFromResources("windows/x86/rxtxSerial.dll");
					installNativeLibraryFromResources("windows/x86/rxtxParallel.dll");
					break;
				case X86_64:
					installNativeLibraryFromResources("windows/x64/rxtxSerial.dll");
					installNativeLibraryFromResources("windows/x64/rxtxParallel.dll");
					break;
				}
				break;
			}
		} catch (Exception pException) {
			status = new Status(Status.StatusCode.ErrorInternalException);
			status.setShortMessage("Failed to install native libraries (rxtxSerial.dll, rxtxParallel.dll). As a workaround you could try to manually install the native libraries to '" + System.getProperty("user.dir") + "'");
			status.setMessage(stackTraceToString(pException));
		}

		// Start SMS service
		logger.info(Library.getLibraryDescription());
		logger.info("Version: " + Library.getLibraryVersion());
		try {
			smsService = new Service();
		} catch (Exception pException) {
			status = new Status(Status.StatusCode.ErrorInternalException);
			status.setShortMessage("Failed to initialize SMS service");
			status.setMessage(stackTraceToString(pException));
		}

		return status;
	}

	private synchronized AGateway getSMSGateway(AbstractSMSNotificationPluginConfiguration pSMSNotificationPluginConfiguration) throws TimeoutException, SMSLibException, IOException, InterruptedException {
		// Lookup SMS gateway (may already exists)
		AGateway smsGateway = smsService.findGateway(pSMSNotificationPluginConfiguration.getGatewayID());

		// In case of not gateway found -> Create new SMS gateway (On demand)
		if (smsGateway == null) {
			// Create new hardware device SMS gateway
			if (pSMSNotificationPluginConfiguration instanceof HardwareDeviceSMSConfiguration) {
				// Cast configuration
				HardwareDeviceSMSConfiguration smsConfiguration = (HardwareDeviceSMSConfiguration) pSMSNotificationPluginConfiguration;

				// Create SMS gateway
				smsGateway = new SerialModemGateway(smsConfiguration.getGatewayID(), smsConfiguration.getHardwarePort(), new Integer(smsConfiguration.getHardwareBaudRate()), smsConfiguration.getHardwareManufacturer(), smsConfiguration.getHardwareModel());
				smsGateway.setOutbound(true);
			}
			// Create new Internet SMS gateway
			if (pSMSNotificationPluginConfiguration instanceof InternetGatewaySMSConfiguration) {
				// Cast configuration
				InternetGatewaySMSConfiguration smsConfiguration = (InternetGatewaySMSConfiguration) pSMSNotificationPluginConfiguration;

				// Create SMS gateway
				switch (smsConfiguration.getGatewayServiceProvider()) {
				case BulkSMS:
					smsGateway = new BulkSmsHTTPGateway(smsConfiguration.getGatewayID(), smsConfiguration.getInternetGatewayUserName(), smsConfiguration.getInternetGatewayPassword());
					smsGateway.setOutbound(true);
					break;
				case Clickatell:
					ClickatellHTTPGateway aClickatellHTTPGateway = new ClickatellHTTPGateway(smsConfiguration.getGatewayID(), smsConfiguration.getInternetGatewayAPI(), smsConfiguration.getInternetGatewayUserName(), smsConfiguration.getInternetGatewayPassword());
					aClickatellHTTPGateway.setSecure(true);
					smsGateway = aClickatellHTTPGateway;
					smsGateway.setOutbound(true);
					break;
				}
			}

			// Register new SMS gateway
			if (smsGateway != null) {
				smsService.stopService();
				smsService.addGateway(smsGateway);
				smsService.startService();
			}
		}

		// Return SMS gateway
		return smsGateway;
	}

	@Override
	public Status execute(ActionEnvironment pActionEnvironment) throws Exception {
		// Prepare return state
		Status status = new Status(Status.StatusCode.Success);

		try {
			// Get SMS configuration
			AbstractSMSNotificationPluginConfiguration smsNotificationConfiguration = AbstractSMSNotificationPluginConfiguration.getInstance(pActionEnvironment);

			// Get SMS gateway to send the message
			AGateway smsGateway = getSMSGateway(smsNotificationConfiguration);

			// Send SMS
			if (smsGateway != null) {
				// Loop Incidents
				for (Incident incident : pActionEnvironment.getIncidents()) {
					StringBuilder smsMessageText = new StringBuilder();
					smsMessageText.append("[");
					smsMessageText.append(incident.getStartTime().toString());
					smsMessageText.append("] ");
					smsMessageText.append(incident.getIncidentRule().getName());
					smsMessageText.append(" -> ");
					smsMessageText.append(incident.getMessage());

					// Send SMS
					OutboundMessage smsMessage = new OutboundMessage(smsNotificationConfiguration.getSMSTo(), smsNotificationConfiguration.transformMessage(smsMessageText.toString()));
					smsMessage.setId("dynaTrace Notification");
					smsService.sendMessage(smsMessage);

					// Log Outbound SMS
					logger.info(smsMessage.toString());

					// Check if SMS was sent successfully
					if ((smsMessage != null) && (MessageStatuses.FAILED.equals(smsMessage.getMessageStatus()))) {
						status.setStatusCode(Status.StatusCode.ErrorTargetService);
						status.setShortMessage("SMS Send Failed. Reason: " + smsMessage.getFailureCause());
						status.setMessage(smsMessage.toString());
					}
				}
			} else {
				status.setStatusCode(Status.StatusCode.ErrorInternalConfigurationProblem);
				status.setShortMessage("No SMS gateway for id '" + smsNotificationConfiguration.getGatewayID() + "' found");
			}
		} catch (SMSNotificationPluginConfigurationException pException) {
			// Append INFO Logging
			String shortMessage = "SMS Configuration Error";
			logger.log(Level.INFO, shortMessage + ": " + pException);
			logger.log(Level.INFO, " SMS configuration caused an exception: " + stackTraceToString(pException));

			// Modify Status (Success -> InternalException)
			status.setStatusCode(Status.StatusCode.ErrorInternalConfigurationProblem);
			status.setShortMessage(shortMessage);
			status.setException(pException);
		} catch (GatewayException pException) {
			// Append INFO Logging
			String shortMessage = "SMS Gatway Error";
			logger.log(Level.INFO, shortMessage + ": " + pException);
			logger.log(Level.INFO, " SMS gateway caused an exception: " + stackTraceToString(pException));

			// Modify Status (Success -> InternalException)
			status.setStatusCode(Status.StatusCode.ErrorInternalException);
			status.setShortMessage(shortMessage);
			status.setException(pException);
		} catch (Exception pException) {
			// Append INFO Logging
			String shortMessage = "SMS Error";
			logger.log(Level.INFO, shortMessage + ": " + pException);
			logger.log(Level.INFO, " Sending SMS caused an exception: " + stackTraceToString(pException));

			// Modify Status (Success -> InternalException)
			status.setStatusCode(Status.StatusCode.ErrorInternalException);
			status.setShortMessage(shortMessage);
			status.setException(pException);
		}

		return status;
	}

	@Override
	public void teardown(ActionEnvironment pEnvironment) throws Exception {
		// Stop SMS service
		logger.log(Level.INFO, "Shutdown SMS service");
		smsService.stopService();
	}

	// /////////////////////////////////////////////////////////////////////
	// DEBUG CODE FOR TESTING WITHOUT DYNATRACE ENVIRONMENT
	// /////////////////////////////////////////////////////////////////////

	public static void main(String[] pArgs) {
		// Prepare Action Environment
		TestActionEnvironment environment = new TestActionEnvironment();
		 environment.setConfigString("serviceProvider", "Hardware Device");
		//environment.setConfigString("serviceProvider", "BulkSMS");
		// environment.setConfigString("internetGatewayAPI", "3261662");
		environment.setConfigString("hardwareModel", "D-Link (DWM-152)");
		environment.setConfigString("hardwarePort", "COM12");
		environment.setConfigString("hardwareBaudRate", "115200");
		environment.setConfigString("hardwareSimPin", "5249");

		environment.setConfigString("internetGatewayUsername", "cgrimm");
		// environment.setConfigPassword("internetGatewayPassword",
		// "bulksms.com");
		environment.setConfigString("smsTo", "+41793535855");
		// environment.setConfigString("smsTo", "+41797433554");

		// Execute
		SMSNotificationPlugin plugin = new SMSNotificationPlugin();
		try {
			plugin.setup(null);
			plugin.execute(environment);
			plugin.teardown(null);
		} catch (Exception pException) {
			pException.printStackTrace();
		}
	}

	public static class TestActionEnvironment implements ActionEnvironment {
		private Map<String, String> passwordConfigMap = new HashMap<String, String>();
		private Map<String, String> stringConfigMap = new HashMap<String, String>();

		@Override
		public Boolean getConfigBoolean(String pKey) {
			return null;
		}

		@Override
		public Date getConfigDate(String pKey) {
			return null;
		}

		@Override
		public Double getConfigDouble(String pKey) {
			return null;
		}

		@Override
		public File getConfigFile(String pKey) {
			return null;
		}

		@Override
		public Long getConfigLong(String pKey) {
			return null;
		}

		@Override
		public String getConfigPassword(String pKey) {
			return passwordConfigMap.get(pKey);
		}

		public void setConfigPassword(String pKey, String pValue) {
			passwordConfigMap.put(pKey, pValue);
		}

		@Override
		public String getConfigString(String pKey) {
			return stringConfigMap.get(pKey);
		}

		public void setConfigString(String pKey, String pValue) {
			stringConfigMap.put(pKey, pValue);
		}

		@Override
		public URL getConfigUrl(String pKey) {
			return null;
		}

		@Override
		public Host getHost() {
			return null;
		}

		@Override
		public boolean isStopped() {
			return false;
		}

		@Override
		public Collection<Incident> getIncidents() {
			Incident incident = new Incident30Impl(new UUID(1, 1), "message", "servername", new IncidentRule30Impl("name", "description", new Condition30Impl("conditions"), new Sensitivity30Impl(Type.PerViolation, new Duration30Impl(), new Duration30Impl(), new Duration30Impl())), null, "recordedSessionID", "recordedSessionName", new Timestamp30Impl(System.currentTimeMillis()), new Timestamp30Impl(System.currentTimeMillis()), Severity.Error, null);
			List<Incident> incidentList = new ArrayList<Incident>();
			incidentList.add(incident);
			return incidentList;
		}

		@Override
		public String getSystemProfileName() {
			return null;
		}

	}

}
